- name: Set hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
    use: "systemd"

- name: Install Zabbix Release Package
  ansible.builtin.apt:
    deb: "https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb"
    state: present

- name: Install Zabbix Server Packages
  ansible.builtin.apt:
    name: "{{ app_packages }}"
    state: latest
    update_cache: true

- name: Configure HAProxy
  ansible.builtin.template:
    src: haproxy.cfg.j2
    dest: "/etc/haproxy/haproxy.cfg"
  notify: restart haproxy

- name: Reload haproxy
  ansible.builtin.systemd:
    name: haproxy
    state: reloaded
    daemon_reload: true

- name: Install Postgres repo
  ansible.builtin.copy:
    dest: "/etc/apt/sources.list.d/pgdg.list"
    content: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
      
- name: Import Repo Key
  ansible.builtin.apt_key:
    url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"

- name: Install Postgresql Client
  ansible.builtin.apt:
    name: "{{ item }}"
    update_cache: true
  loop: 
  - "postgresql-client-{{ postgresql_version }}"

- name: Create Database
  community.postgresql.postgresql_db:
    name: "{{ db_name }}"
    owner: "{{ db_user }}"
    login_host: "127.0.0.1"
    login_user: "postgres"
    login_password: "postgres"
    port: "5432"
  when: inventory_hostname == 'app0'
  
- name: Grant Privileges to Zabbix user
  community.postgresql.postgresql_privs:
    database: "{{ db_name }}"
    roles: "{{ db_user }}"
    type: "database"
    privs: "ALL"
    login_host: "127.0.0.1"
    login_user: "postgres"
    login_password: "postgres"
    port: "5432"
  when: inventory_hostname == 'app0'

- name: Check state (if scripts were already applied)
  ansible.builtin.stat:
    path: "/etc/zabbix/init_script.done"
  register: init_script_state
  when: inventory_hostname == 'app0'

- name: Apply scripts
  block:
  - name: Unarchive script for zabbix db
    ansible.builtin.shell:
      cmd: |
        gunzip -k /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz
      creates: "/usr/share/zabbix-sql-scripts/postgresql/server.sql"

  - name: Apply scripts
    community.postgresql.postgresql_script:
      db: "{{ db_name }}"
      path: "/usr/share/zabbix-sql-scripts/postgresql/server.sql"
      login_host: "127.0.0.1"
      login_password: "{{ db_pass }}"
      login_user: "{{ db_user }}"

  - name: Create state file
    ansible.builtin.file:
      mode: "400"
      path: "/etc/zabbix/init_script.done"
      owner: "zabbix"
      group: "zabbix"
      state: touch
  when: 
  - inventory_hostname == 'app0'
  - not init_script_state.stat.exists  

- name: Configure Zabbix Server
  ansible.builtin.template:
    src: "zabbix_server.conf.j2"
    dest: "/etc/zabbix/zabbix_server.conf"
    owner: zabbix
    group: zabbix
    mode: "0644"
  notify: restart zabbix-server

- name: Remove default config
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: nginx reload
  
- name: Configure Zabbix Nginx Server
  ansible.builtin.template:
    src: "zabbix_nginx.conf.j2"
    dest: "/etc/zabbix/nginx.conf"
    owner: zabbix
    group: zabbix
    mode: "0644"
  notify: nginx reload

      #- name: Install Packages
      #  ansible.builtin.apt: 
      #    name: "{{ app_packages }}"
      #    state: latest
      #    update_cache: true
      #
      #- name: Configure PHP 
      #  ansible.builtin.lineinfile:
      #    path: "/etc/php/8.1/fpm/php.ini"
      #    insertafter: ";cgi.fix_pathinfo.*"
      #    line: "cgi.fix_pathinfo=0"
      #  notify: restart php-fpm
      #
      #- name: Configure nginx for wordpress
      #  ansible.builtin.copy:
      #    src: "wp.conf"
      #    dest: "/etc/nginx/conf.d/wp.conf"
      #    owner: www-data
      #    group: www-data
      #  notify: nginx reload
      #
      #- name: Remove default config
      #  ansible.builtin.file:
      #    path: "/etc/nginx/sites-enabled/default"
      #    state: absent
      #  notify: nginx reload
      #
      #- name: Download and unzip wordpress files
      #  ansible.builtin.unarchive:
      #    src: https://wordpress.org/latest.zip
      #    dest: /var/www/
      #    remote_src: yes
      #    owner: www-data
      #    group: www-data
      #    
      #- name: Configure wordpress
      #  ansible.builtin.template:
      #    src: "wp-config.php.j2"
      #    dest: "/var/www/wordpress/wp-config.php"
      #    owner: "www-data"
      #    group: "www-data"
